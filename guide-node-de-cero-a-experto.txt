================================================================

NODE

================================================================

ENTORNO
------------------------------
IP	: 10.10.3.153	
SSOO	: CentOS Linux release 7.7
Usuario : scadm

LOCAL > D:\des\Projects\course.node
REMOTO> /opt/sc/sc8/node

SOFTWARE
-------------------------------
Chrome			: recomendado por las herramentas de desarrollo
Postman 7.23 		: probar servicio rest >> https://www.postman.com/downloads/	<== PENDIENTE (BLOQUEO) Ticket#2020050610000325 : SOLUCIONADO
			  CUENTA:
			    	Email : pmluque69@gmail.com
			    	Usuario:  pmluque   
				Password: Po0104la
Visual Studio Code	:
	Extensiones	HTML CSS Support  ecmel.vscode-html-css
			JavaScript (ES6) code snippets xabikos.javascriptsnippets
			JS-CSS-HTML Formatter  lonefy.vscode-js-css-html-formatter
			Terminal formulahendry.terminal
			Terminal SSH sailhenz.terminal-ssh
			TypeScript Importer pmneo.tsimporter
	Ej. de uso: 
			Ctrl+Alt+R, or press F1 and then select/type Run Terminal 
			To stop the running commands, use shortcut Ctrl+Alt+C, or press F1 and then select/type Stop Terminal Command

Instalar GIT		git-scm.com -> https://git-scm.com/download/win
			GIT_HOME = d:\des\Programs\Git
			> git --version		2.26+
			--- iniciar variables git  (existe un gitbash )
			> git config --global user.name "Pedro"
			> git config --global user.email pmluque@gmail.com
			-- confirmar configuración
			> git config --list
			[enter] siguiente página
			[q] terminar

			
Update GIT en linux	-- GIT version 2.15+	
			# sudo yum update git	
			git version 1.8.3.1
			
			https://computingforgeeks.com/how-to-install-latest-version-of-git-git-2-x-on-centos-7/
			# sudo yum remove git*
			# sudo yum -y install  https://centos7.iuscommunity.org/ius-release.rpm		
			# sudo yum -y install  git2u-all
			¡Listo!
			[root@scdocker sc8]# git --version
			git version 2.16.6

=============== SERVIDOR ===================	

Instalar NODE		Requisito: abrir puerto
			Requisito: sudo yum install gcc-c++ make
			Requisito: usuario con permiso sudo
				# sudo visudo => agregar linea del usuario y listo !
				# usermod -a -G sudo scadm  -> este grupo no existe , paso no obligatorio.
			Requisito: gcc 6.3.0 , clang++ 8.0.0 --> https://linuxhostsupport.com/blog/how-to-install-gcc-on-centos-7/

			/opt/sc/sc8/node
			https://nodejs.org/es/	-> https://nodejs.org/dist/v14.2.0/node-v14.2.0.tar.gz | node-v12.16.3.tar.gz
			https://guiadev.com/como-instalar-node-js-en-un-servidor-centos-7/
			----- Última versión:
			$ wget http://nodejs.org/dist/v14.2.0/node-v14.2.0.tar.gz
			$ tar xzvf node-v* && cd node-v*
			$ sudo yum install gcc gcc-c++
			$ ./configure
			$ make         || .... error
			---- Versión 12
			$ wget http://nodejs.org/dist/v12.16.3/node-v12.16.3.tar.gz
			$ tar xzvf node-v* && cd node-v*
			/opt/sc/sc8/node/node-v12.16.3
			$ ./configure
			$ make  || .... error
			$ sudo make install
			---- REPO
			$ sudo rpm-i http://download.fedoraproject.org/pub/epel/beta/7/x86_64/epel-release-7-0.2.noarch.rpm
			Verificando URL
			Nueva URL:  http://mirror.uv.es/mirror/fedora-epel/7/x86_64/repodata/repomd.xml
			---
			https://linuxize.com/post/how-to-install-node-js-on-centos-7/
			V.10)
			$ curl -sL https://rpm.nodesource.com/setup_10.x | sudo bash -
			$ sudo yum install -y nodejs		|| Requisito: sudo yum install gcc-c++ make
			$ sudo yum install -y nodejs  --skip-broken
			$ node --version
			v6.17.1
			
			EOL : Fin de vida de versiones de NODEJS > https://github.com/nodejs/node/blob/master/CHANGELOG.md

			$ npm --version
			3.10.10
			OK
			--- Otro link a revisar:
			https://tecadmin.net/install-latest-nodejs-and-npm-on-centos/
			Ejemplo: Servidor de test

			---- $ vi demoserver.js			
			var http = require('http');
			http.createServer(function (req, res) {
  				res.writeHead(200, {'Content-Type': 'text/plain'});
  				res.end('Welcome Node.js');
			}).listen(3001, "10.10.3.153");
			console.log('Server running at http://10.10.3.153:3001/');
			---- $ node --inspect demoserver.js

			Abrir puerto en firewall 
			¿Qué son las DMZ?-> https://blog.desdelinux.net/como-abrir-puertos-en-el-firewall-de-centos-7/
			$ sudo firewall-cmd --zone=public --add-port=3001/tcp --permanent
			El modificador "permanent" establecer una regla fija en el sistema.
			$ sudo firewall-cmd --reload
			Más ejemplos:
			$ sudo iptables –-list
			$ firewall-cmd --permanent --zone=public --add-service=http (Abrimos servicio http)
			$ firewall-cmd --permanent --zone=public --add-service=ftp (Abrimos servicio ftp)
			# firewall-cmd --list-all

			Otras URL de instalación:
			https://www.digitalocean.com/community/tutorials/how-to-install-node-js-on-a-centos-7-server

			
Actualizar NODE : https://www.dbigcloud.com/sistemas-operativos/258-como-actualizar-node-js.html
		  LINUX
			# sudo npm --version
			# sudo npm cache clean -f
			# sudo npm install -g n
			# sudo n stable
			[root@scdocker sc8]# sudo n stable

  			installing : node-v12.16.3
			mkdir : /usr/local/n/versions/node/12.16.3
		        fetch : https://nodejs.org/dist/v12.16.3/node-v12.16.3-linux-x64.tar.xz
			   installed : v12.16.3 to /usr/local/bin/node
		        active : v6.17.1 at /bin/node


                        [root@scdocker sc8]# node --version
                        v12.16.3

			---- actualizamos NPM
			# npm update npm -g
			# sudo npm --version
			3.10.10   (no ha cambiado)


		  WINDOWS
			Descargarse distribución e instalar -> https://nodejs.org/en/download/
				+ chocolatey
				+ python 3.8.2  -> c:\python38
				+ dotnetfx

		  DOCKER
			(*) Existe docker con node => https://hub.docker.com/_/node/
		 
			
DOCUMENTACION NODE
--------------------------------------
https://nodejs.org/en/docs --> seleccionar la de la versión estable.
https://nodejs.org/dist/latest-v12.x/docs/api/


CONCEPTOS NODE
--------------------------------------
¿Qué es node? JS en servidor. Lenguaje backend, acceso a archivos, info de ssoo, procesos , corre sobre engine js-v8 en c++ de google que es el que usar chrome. 

Aplicaciones: sockets (comunicación cliente-servidor) , manejo de filesystem con cargas simultáneas (no bloquea hasta terminar) , servidores rest, conexiones a bbdd, servidores locales o remotos en tiempo real.

Puntos clave
- entrada y salida "sin bloqueos" de servidor
- muy rapido.
- + de 470 paquetes ... el mayor ecosistema de librerías del mundo.
- usa lenguaje javascript

Quien lo usa: netflix, paypal, linkedin, walmart, uber, ebay , nasa , ...

Blocking vs non-bocking? Un callback hará que sea non-blocking , una función que recibe la variable como argumento y que produce la salida cuando termina.

SECCIÓN 2
=============================================

CICLO DE VENTOS EN NODE
--------------------------------------

01) Ver ejemplos 01_concept* , 02_*

SECCIÓN 3
=============================================

REFORZAMIENTO DE JAVASCRIPT
---------------------------------------
Instalación de paquetes mediante npm
> nodemon   :  	> sudo npm install -g nodemon
		> rs  (reset de nodemon sin tener que parar y volver a ejecutar la linea anterior)
Reforzamiento de ES6 y ES7
 Let vs Var => USAR SIEMPRE LET
 Template literales 
 Destructuración
 Funciones de flecha
 Callbacks y callbacks en cadena
 Promesas y promesas en cadenapm
 Async y Await

SECCIÓN 4 : 
=============================================

BASE NODE
-------------------------------------------
Requerir información de otros archivos
Requerir paquetes
> $ node -version
  v10.16.3
  v12.16.3	(tras instalar la descarga)

> Ir a https://nodejs.org/en/docs
  Seleccionar 10

API: https://nodejs.org/dist/latest-v12.x/docs/api/fs.html

CONCEPTO: REQUIRE 
	- tres tipos:
		- propia de node 	ej. fs
		- instalable no nativo	ej. express
		- propios nuestros	ej. ./ubicación/nombre

Importar archivos personalizados
	- Ejercicio para hacer uso de un require propio.
	- CONCEPTO: módulo > $ node <nombreapp.js>  -> y muestra el bloque actual de modulos
		objeto global disponible a lo largo de toda la aplicación.
		Añado module.export

	Recibir parámetros desde la terminal
		CONCEPTO: "PROCESS" es una variable de entorno que se crea automáticamente igual que MODULE.
		console.log( process );
		Ej. llamada > node app --base=5
		PAQUETE: Control de errores sobre los parámetros e incluso crear documentación.
		>> yargs

		$ node --help
NPM
		$ npm init   --> crear un paquete llamado package.json  || url-friendly
		CONCEPTO: package.json  (tocar manualmente solo para cosas muy concretas)
				fichero de dependencias producción
				fichero de dependencias desarrollo

		// Ej. 1 --save
		$ npm i yargs --save
		// Se añade al directorio de módulos. Estos modulos nunca se distribuyen.

		// Ej. 2 --save-dev
		$ npm install --save-dev nodemon
		// Esto es una dependencia solo para desarrollo
		// Antes se había instalado de forma global y eso requería privilegios admin. En este no.

	
Install
		// Regenerar módulos en el entorno.
                $ npm install
Uninstall
		$ npm uninstall nodemon
Package.json
		Saber crearlo.
Yargs
		> node .\03.app-node-1.js listar --base 10 --limite=20
		npm yargs --> https://www.npmjs.com/package/yargs

Recibir parámetros por línea de comando
		OK

Colores para la consola
		npm colors




GIT
-------------------------------------------


































