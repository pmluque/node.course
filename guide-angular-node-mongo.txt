
-- NODE

Node.js is a software platform for scalable server-side and networking applications. 
Node.js applications are written in JavaScript and can be run within the Node.js runtime 
on Mac OS X, Windows, and Linux without changes.

Node.js applications are designed to maximize throughput and efficiency, 
using non-blocking I/O and asynchronous events. Node.js applications run single-threaded, 
although Node.js uses multiple threads for file and network events. 
Node.js is commonly used for real-time applications due to its asynchronous nature.



-- INSTALAR NODE : paso previo para crear la aplicación en la imagen docker

https://nodejs.org/es/
https://nodejs.org/es/download/

$ npm -v   		--> gestor de paquetes
$ npm install -g npm 	--> actualizar gestor de paquetes
$ node -v

LINUX) https://www.digitalocean.com/community/tutorials/how-to-install-node-js-on-a-centos-7-server

$ sudo yum -y install epel-release
$ sudo yum -y install nodejs
$ sudo yum -y install npm
$ node --version

v6.17.1   (29/Feb/20)

--- INSTALAR NODE EN DOCKER

https://hub.docker.com/_/node/

$ docker pull node

-- CREAR UNA APLICACIÓN NODE CON DOCKER

https://www.digitalocean.com/community/tutorials/como-crear-una-aplicacion-node-js-con-docker-es
Cuando se construye y escala una aplicación con Docker, el punto de partida suele ser 
la creación de una imagen para su aplicación, que, luego, puede ejecutar en un contenedor. 
La imagen incluye el código, las bibliotecas, los archivos de configuración, 
las variables del entorno y el tiempo de ejecución de su aplicación. 

1º. Crear directorio proyecto

/opt/sc/sc8/20.node

2º. Crear un package.json

$ npm install

3º. Crear archivos aplicación

------------------------------------------ app.js
const express = require('express');
const app = express();
const router = express.Router();

const path = __dirname + '/views/';
const port = 8080;

-------------------------------------------
La función router.use carga una función de middleware que registrará las solicitudes del router y las transmitirá a las rutas de la aplicación. Estas se definen en las funciones siguientes, que especifican que una solicitud GET a la URL del proyecto base debe devolver la página index.html, mientras que una solicitud GET a la ruta /sharks debe devolver sharks.html.

Por último, monte el middleware router y los activos estáticos de la aplicación e indíquele a esta que escuche por el puerto 8080:

Crear las páginas html correspondientes a las vistas.
Y los complementos: style.css

CONTROL DEL TRÁFICO : $ sudo ufw allow 8080

INICIAR LA APLICACIÓN: $ node app.js

http://10.10.3.153:8080/

ERROR: No carga CSS
https://stackoverflow.com/questions/51201869/node-refused-to-apply-style-because-its-mime-type-text-html-is-not-a-support


4º. Crear el dockerfile

Para ajustar los permisos en el código de nuestra aplicación en el contenedor, 
cree el subdirectorio node_modules en /home/node y el directorio app. 
Procederemos a utilizar la imagen node:10-alpine

Esta imagen incluye Node.js y npm. Cada Dockerfile debe comenzar con una instrucción FROM.

De forma predeterminada, la imagen Node de Docker incluye un usuario node no root que puede usar para evitar ejecutar el contenedor de su aplicación como root. Evitar ejecutar contenedores como root y restringir las capacidades del contenedorsolo a las necesarias para la ejecución de sus procesos es una práctica de seguridad recomendada. Por lo tanto, utilizaremos el directorio principal del usuario node como directorio de trabajo de nuestra aplicación, y procederemos a configurarlo como nuestro usuario dentro del contenedor. Para obtener más información sobre las mejores prácticas al trabajar con la imagen Node de Docker, consulte esta guía de prácticas recomendadas.

BUENAS PRÁCTICAS: 
*  https://github.com/nodejs/docker-node/blob/master/docs/BestPractices.md
*  https://www.digitalocean.com/community/tutorials/building-optimized-containers-for-kubernetes#managing-container-layers


- A continuación, establezca el directorio de trabajo de la aplicación en /home/node/app:

--------------------- dockerfile

[root@scdocker 20.node]# cat dockerfile
# La imagen incluye node y npm. Incluye usuario node (no root)
FROM node:10-alpine
# Crear directorio con los permisos adecuados
RUN mkdir -p /home/node/app/node_modules && chown -R node:node /home/node/app
# A continuación, establezca el directorio de trabajo de la aplicación en /home/node/app:
WORKDIR /home/node/app
# A continuación, copie los archivos package.json y package-lock.json
COPY package*.json ./
# Para garantizar que todos los archivos de la aplicación sean propiedad del usuario node no root,
# incluido el contenido del directorio node_modules, cambie el usuario a node antes de ejecutar npm install:
USER node
# Tras copiar las dependencias del proyecto y cambiar nuestro usuario, podemos ejecutar npm install:
RUN npm install
# A continuación, copie el código de su aplicación con los permisos apropiados al directorio de la aplicación en el contenedor:
COPY --chown=node:node . .
# Por último, exponga el puerto 8080 en el contenedor e inicie la aplicación:
EXPOSE 8080

CMD [ "node", "app.js" ]

# Ahora, está listo para crear la imagen de la aplicación usando el comando docker build.
# Usar la marca -t con docker build le permitirá etiquetar la imagen con un nombre fácil de recordar.
# docker build -t your_dockerhub_username/nodejs-image-demo .

----------------------------------------
# docker build -t example:1.0 .
# docker run --name example1 -p 80:8080 -d example:1.0

5º SUBIR AL DOCKERHUB

$ docker login -u your_dockerhub_username 

# Cuando se le indique, ingrese la contraseña de la cuenta de Docker Hub. 
# Iniciar sesión de esta manera creará un archivo ~/.docker/config.json en el directorio 
# principal de su usuario con sus credenciales de Docker Hub.


$ docker push your_dockerhub_username/nodejs-image-demo

- Elimine el contenedor detenido y todas las imágenes, incluso las no utilizadas o pendientes, con el siguiente comando:

$ docker system prune -a

$ Descargar imagen del DOCKERHUB:

$ docker pull your_dockerhub_username/nodejs-image-demo

# Ahora, puede volver a compilar su contenedor usando el comando que se indica en el Paso 3:
$ docker run --name nodejs-image-demo -p 80:8080 -d your_dockerhub_username/nodejs-image-demo


=====================================

PARTE II: MONGO

MongoDB is a free and open-source cross-platform document-oriented database program. 
Classified as a NoSQL database program, MongoDB uses JSON-like documents with schemata. MongoDB is developed by MongoDB Inc.,

=====================================

$ docker pull mongo
$ docker run --name some-mongo -d mongo:tag
$ docker run -it --network some-network --rm mongo mongo --host some-mongo test

----------- STACK -------------  vi docker-compose.yml

# Use root/example as user/password credentials
version: '3.1'

services:

  mongo:
    image: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example

  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example

------------------- Nota
By default Mongo will set the wiredTigerCacheSizeGB to a value proportional to the host's total memory regardless of memory limits you may have imposed on the container. In such an instance you will want to set the cache size to something appropriate, taking into account any other processes you may be running in the container which would also utilize memory.

Taking the examples above you can configure the cache size to use 1.5GB as:

$ docker run --name some-mongo -d mongo --wiredTigerCacheSizeGB 1.5
-------------------

$ docker-compose up -d

$ docker exec -it some-mongo bash

-------------| Recordatorio estándar:

mongod --port 27017 --dbpath /data/db1

----------- /etc/mongodb/mongodb.conf
use admin
db.createUser(
  {
    user: "myServerAdmin",
    pwd: "password",
    roles: [ { role: "userAdminAnyDatabase", db: "admin" } ]
  }
);
-----------

mongod --auth --config /etc/mongodb/mongodb.conf
mongo --port 27017 -u myServerAdmin -p password --authenticationDatabase admin


----------- DOCKER

$ docker run — rm -v $PWD:/workdir/ -w /workdir/ mongo:4.0.4 mongodump — uri mongodb://usuario:contrasena@X.X.X.X:XXX/nombreBaseDatos — out /workdir/

Más: https://medium.com/@kodamirmo/conectando-a-mongodb-ssh-y-docker-390aa64cf27

----------- DOCKER

$ mongo --port 27017 -u myServerAdmin -p password --authenticationDatabase admin
$ mongo --port 27017 -u root -p password --authenticationDatabase admin
$ mongo --port 27017 -u root -p password

# CREAR BASE DE DATOS
use sctrldb

# CREAR USUARIO

------------------------|| https://docs.mongodb.com/manual/reference/method/db.createUser/


db.createUser(
    {
      user: "sctrl",
      pwd: "sctrl",
      roles: [ { "role" : "readWrite", "db" : "sctrldb" } ]
    }
);




Crear Base de datos use Nombre_Base_Datos

Mostrar las bases de datos existentes

show dbs Crear usuario:
use db.createUser( { user:"luiseliberal", pwd:"s1zha8to", roles: [ {role:"userAdminAnyDatabase", db:"admin"}, "readWrite" ] })

otro ejemplo de creación de usuario:

use db.createUser( { "user" : "luiseliberal", "pwd": "xxxxxxx", "roles" : [ { role: "clusterAdmin", db: "admin" }, { role: "readAnyDatabase", db: "admin" }, "readWrite" ] }, { w: "majority" , wtimeout: 5000 } )

Ver usuarios existentes:
show users

Otorgar autorizaciones
use db db.auth({user:"usuario",pwd:"password"})

Remover Usuarios
use db , db.dropUser("usuario")

Crear tabla e Insertar Datos
use db
use table
db.table.insert({id:1, nombre:"cualquier", propiedades:["uno", "dos"], arreglo:[{a:"", b:"", c:90}] })

Buscar (queries de consulta)
Traer todos los objetos: db.[NOMBRE_BASE_DATOS].find()

Búsqueda por criterio: db.products.find( { qty: { $gt: 25 } } )

Búsqueda por equivalencia: db.bios.find( { _id: 5 } )

Búsqueda usando operadores retornando si el id es 5 o se encuentra el object id en este caso: db.bios.find( { _id: { $in: [ 5, ObjectId("507c35dd8fada716c89d0013") ] } } ) Búsqueda por rango: db.collection.find( { field: { $gt: value1, $lt: value2 } } );



---------------------- conectarse externamente:

Para poder conectarnos remotamente, edita el fichero /etc/mongod.conf

Cambia el campo bind_ip = 127.0.0.1, por la IP de tu servidor, y aprovecha a cambiar el campo port = 27017 por otro diferente, para mayor seguridad

Reinicia mongo para aplicar los cambios.

sudo service mongod restart
Ahora si queremos conectarnos por el MongoShell a nuestra instancia de mongo, deberemos escribir el siguiente comando desde la terminal:

mongo --host x.x.x.x --port xxxxx -u myServerAdmin -p password --authenticationDatabase admin

------------------------------------------------------|||

Y para conectarnos desde una aplicación: mongodb://myUser:12345678@x.x.x.x:xxxxx/myDatabase

------------------------------------------------------|||

IDE MONGO - ROBOMONGO

------------------------------------------------------|||
























SEGURIDAD:
https://expressjs.com/fr/api.html#res.sendFile







